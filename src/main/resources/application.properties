spring.application.name=microservicio-spring-cloud-gateway
server.port:8090

eureka.client.service-url.defaultZone=http://127.0.0.1:8761/eureka

# Microservicio usuarios (USANDO ZUUL SERVER)
#############################################
# Lo dejamos solo para comparar con el del Spring Cloud Gateway
#
#zuul.routes.usuarios.service-id=microservicio-usuarios
#zuul.routes.usuarios.path=/api/alumnos/**


# Microservicio usuarios (USANDO SPRING CLOUD GATEWAY)
######################################################
# routes[0].id, indicamos un identificador para la ruta de la posición 0, ya que, routes es un arreglo de rutas. Es opcional ya que
#	ya que si no lo colocamos Spring Cloud Gateway le asignará un identificador único a nuestra ruta (un alfanumérico).
# routes[0].uri, aquí iría nuestra ruta, pero nuestra ruta no es lo mismo que nuestro path. Si vamos a usar Load Balancer haciendo 
#	referencia hacia el nombre del microservicio sería (lb => load balancer): lb://nombre-del-microservicio,
#	A continuación se muestra un ejemlo: lb://microservicio-usuarios.
#	Como nota adicional, la uri de esta configuración reemplaza al ...service-id de Zuul, solo que aquí hay que colocarle el lb://
# routes[0].predicates, está basado en un Map de java por lo tanto tiene una key y un value.
# 	El key sería Path y el valor sería la ruta base que le definamos al microservicio, ejemplo de una ruta base: /api/alumnos/**
# routes[0].filters, es una configuración que Spring Cloud Gateway no lo hace por defecto, mientras que Zuul sí, por esa razón 
# 	es importante definirla aquí. Lo que se hace es definír el número de parámetros se tienen que eliminar al momento 
#	de hacer el request al microservicio-usuarios, es decir, eliminar el  prefijo, pero ¿Cuántas partes?, en nuestro caso tenemos
#	en el Path=/api/alumnos/**, lo que significa que: api es una parte, luego alumnos es otra parte, por lo tanto habría que
#	eliminar 2 partes. Si por ejemplo, fuera: Path=/alumnos/**, vemos que solo tenemos alumnos, es una sola parte, por lo tanto
# 	diríamos StripPrefix=1. 
####Conclusión: StripPrefix, define la cantidad de partes de nuestro Path
spring.cloud.gateway.routes[0].id=microservicio-usuarios
spring.cloud.gateway.routes[0].uri=lb://microservicio-usuarios
spring.cloud.gateway.routes[0].predicates=Path=/api/alumnos/**
spring.cloud.gateway.routes[0].filters=StripPrefix=2

# Microservicio cursos
spring.cloud.gateway.routes[1].id=microservicio-cursos
spring.cloud.gateway.routes[1].uri=lb://microservicio-cursos
spring.cloud.gateway.routes[1].predicates=Path=/api/cursos/**
spring.cloud.gateway.routes[1].filters=StripPrefix=2

# Microservicio examenes
spring.cloud.gateway.routes[2].id=microservicio-examenes
spring.cloud.gateway.routes[2].uri=lb://microservicio-examenes
spring.cloud.gateway.routes[2].predicates=Path=/api/examenes/**
spring.cloud.gateway.routes[2].filters=StripPrefix=2

# Microservicio respuestas
spring.cloud.gateway.routes[3].id=microservicio-respuestas
spring.cloud.gateway.routes[3].uri=lb://microservicio-respuestas
spring.cloud.gateway.routes[3].predicates=Path=/api/respuestas/**
spring.cloud.gateway.routes[3].filters=StripPrefix=2


#### Configuración realizada en el curso pero en esta versión del proyecto que uso no reconoce
#### Según Andrés en un comentario del curso meenciona que ya se toma por defecto loadbalancer
#### Pero de todos modos dejo la configuración realizada en el curso más su explicación
# Como estamos usando Spring Cloud Gateway deberíamos usar Spring Cloud Load Balancer,
# pero como tenemos la dependencia de Eureka, este por debajo usa Ribbon y por lo tanto, 
# de forma automática, si detecta que nuestro class path encuentra a Ribbon, va a utilizar
# a Ribbon por defecto, pero si lo deshabilitamos usará Spring Cloud Load Balancer. 
# Se recomienda hacer eso cuando usamos Spring Cloud Gateway, de esa manera usará
# Spring Cloud Load Balancer propio de Spring Cloud
#spring.cloud.loadbalancer.ribbon.enabled=false


